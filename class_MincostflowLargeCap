#include "auto_util_header.hpp"

// O({m}^2\log{n}\log{c})
class MincostflowLargeCap {
private:
	struct edge_t {
		int from; int to; ll raw_cap; ll cur_cap;
		ll cst; // original cost
		ll dif; // difference considering potential
		edge_t* rev;
	};
	struct node {
		int id; bool done; edge_t* e_from;
		ll dst; // distance considering potential
		ll pot; // potential
		list<edge_t*> edges;
	};
	struct pq_t {
		int id; ll d;
		bool operator<(const pq_t & another) const {
			return d != another.d ? d > another.d : id > another.id;
		}
	};
	void add_edge(int a, int b, ll cap, ll cst) {
		edge_t *e_pre;
		edge_t *e_rev;
		e_pre = new edge_t({ a, b, cap, 0, cst, cst, nullptr });
		e_rev = new edge_t({ b, a, 0, 0, -cst, -cst, nullptr });
		e_pre->rev = e_rev;
		e_rev->rev = e_pre;
		nodes[a].edges.push_back(e_pre);
		nodes[b].edges.push_back(e_rev);
	}
	void update_potential_by_Dijkstra(int s) {
		Loop(i, n) {
			nodes[i].done = false;
			nodes[i].e_from = nullptr;
			nodes[i].dst = LLONG_MAX;
		}
		nodes[s].dst = 0;
		priority_queue<pq_t> pq;
		pq.push({ nodes[s].id, nodes[s].dst });
		while (pq.size()) {
			int a = pq.top().id;
			pq.pop();
			if (nodes[a].done) continue;
			nodes[a].done = true;
			for (edge_t* e : nodes[a].edges) {
				if (e->cur_cap == 0) continue;
				int b = e->to;
				if (nodes[b].done) continue;
				ll buf = nodes[a].dst + e->dif;
				if (buf < nodes[b].dst) {
					nodes[b].dst = buf;
					nodes[b].e_from = e;
					pq.push({ b, nodes[b].dst });
				}
			}
		}
		Loop(i, n) {
            if (nodes[i].dst != LLONG_MAX) {
				nodes[i].pot += nodes[i].dst;
			}
            else {
				nodes[i].pot += (sup_sum_cst << 1);
			}
		}
		Loop(i, n) {
			if (i != s) nodes[i].pot -= nodes[s].pot;
		}
		nodes[s].pot -= nodes[s].pot;
	}
	void update_difference() {
		Loop(a, n) {
			for (edge_t* e : nodes[a].edges) {
				int b = e->to;
				e->dif = e->cst + nodes[a].pot - nodes[b].pot;
			}
		}
	}
    void increment_capacity(edge_t* e) {
        if (e->cur_cap > 0) {
            e->cur_cap++;
        }
        else {
    		update_potential_by_Dijkstra(n - 1);
            update_difference();
            ll pre_dif = e->dif;
            update_potential_by_Dijkstra(e->to);
            update_difference();
            if (nodes[e->from].dst < LLONG_MAX && nodes[e->from].dst + pre_dif < 0) {
                e->rev->cur_cap++;
                int a = e->from;
                while (a != e->to) {
                    nodes[a].e_from->cur_cap--;
                    nodes[a].e_from->rev->cur_cap++;
                    a = nodes[a].e_from->from;
                }
            }
            else {
                e->cur_cap++;
            }
        }
    }
	vector<node> nodes;
	int n, src, snk;
    int capacity_digits;
    ll sup_sum_cap, sup_sum_cst;
	ll sum_cost;
	ll sum_flow;
public:
	MincostflowLargeCap(const vvi &lst, const vvll &cap, const vvll &cst, int s, int t, ll f = LLONG_MAX) {
		this->n = lst.size() + 1; // add an extra point
		this->src = s;
		this->snk = t;
		this->nodes.resize(n);
		this->sum_cost = 0;
		this->sum_flow = 0;
		Loop(i, n) {
			this->nodes[i] = { i, false, nullptr, LLONG_MAX, 0, {} };
		}
        // construct graph (set t->s and edges from the extra point to each node, other than given edges)
        {
            this->sup_sum_cap = 1;
            this->sup_sum_cst = 1;
            Loop(i, lst.size()) {
                Loop(j, lst[i].size()) {
                    if (cst[i][j] >= 0) {
                        add_edge(i, lst[i][j], cap[i][j], cst[i][j]);
                        sup_sum_cap += cap[i][j];
                        sup_sum_cst += cst[i][j];
                    }
                    else {
                        if (i == lst[i][j]) {
                            this->sum_cost += cst[i][j] * cap[i][j];
                        }
                        else {
                            add_edge(i, lst[i][j], cap[i][j], cst[i][j]);
                            sup_sum_cap += cap[i][j];
                            sup_sum_cst += -cst[i][j];
                        }
                    }
                }
            }
            this->capacity_digits = ceillog2(sup_sum_cap);
            // set edges from the extra point to each node
            Loop(i, lst.size()) {
                add_edge(this->n - 1, i, 1, 0);
            }
            for (edge_t* e : nodes[this->n - 1].edges) {
                e->cur_cap = 1;
            }
			// set t->s
            if (f == LLONG_MAX) f = (1LL << this->capacity_digits) - 1;
            add_edge(this->snk, this->src, f, -sup_sum_cst);
        }
        // run flow
        {
            // capacity scaling
            Loopr(k, this->capacity_digits) {
                // shift once for each capacity
                Loop(i, lst.size()) {
                    for (edge_t* e : nodes[i].edges) {
                        e->cur_cap <<= 1;
                    }
                }
                ll mask = 1LL << k;
                // increment capacity to each corresponded edge 
                Loop(i, lst.size()) {
                    for (edge_t* e : nodes[i].edges) {
                        if (e->raw_cap & mask) {
                            this->increment_capacity(e);
                        }
                    }
                }
            }
        }
        // get results
        {
            Loop(i, lst.size()) {
                for (edge_t* e : nodes[i].edges) {
                    if (e != nodes[snk].edges.back()) {
                        if (e->raw_cap > 0) {
                            this->sum_cost += e->rev->cur_cap * e->cst;
                        }
                    }
                    else {
                        this->sum_flow += e->rev->cur_cap;
                    }
                }
            }
        }
	}
	ll get_cost() {
		return this->sum_cost;
	}
	ll get_flow() {
		return this->sum_flow;
	}
};